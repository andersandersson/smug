<?xml version="1.0" encoding="UTF-8"?>
<project name="JoLiVi" default="help">

  <!-- The local.properties file is created and updated by the 'android' tool.
       It contains the path to the SDK. It should *NOT* be checked in in Version
       Control Systems. -->
  <property file="local.properties" />

  <!-- The build.properties file can be created by you and is never touched
       by the 'android' tool. This is the place to change some of the default property values
       used by the Ant rules.
       Here are some properties you may want to change/update:

       application.package
           the name of your application package as defined in the manifest. Used by the
           'uninstall' rule.
       source.dir
           the name of the source directory. Default is 'src'.
       out.dir
           the name of the output directory. Default is 'bin'.

       Properties related to the SDK location or the project target should be updated
        using the 'android' tool with the 'update' action.

       This file is an integral part of the build system for your application and
       should be checked in in Version Control Systems.

       -->
  <property file="build.properties" />

  <!-- The default.properties file is created and updated by the 'android' tool, as well
       as ADT.
       This file is an integral part of the build system for your application and
       should be checked in in Version Control Systems. -->
  <property file="default.properties" />

  <!-- Custom Android task to deal with the project target, and import the proper rules.
       This requires ant 1.6.0 or above. -->
  <path id="android.antlibs">
    <pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
    <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
    <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
    <pathelement path="${sdk.dir}/tools/lib/apkbuilder.jar" />
    <pathelement path="${sdk.dir}/tools/lib/jarutils.jar" />
  </path>

  <property name="antcontrib.loc" location="tools/ant-contrib/ant-contrib-1.0b3.jar"/>

  <echo>${antcontrib.loc}</echo>
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${antcontrib.loc}"/>
    </classpath>
  </taskdef>

  <taskdef name="setup"
    classname="com.android.ant.SetupTask"
    classpathref="android.antlibs" />

  <!-- Execute the Android Setup task that will setup some properties specific to the target,
       and import the build rules files.

       The rules file is imported from
          <SDK>/platforms/<target_platform>/templates/android_rules.xml

       To customize some build steps for your project:
       - copy the content of the main node <project> from android_rules.xml
       - paste it in this build.xml below the <setup /> task.
       - disable the import by changing the setup task below to <setup import="false" />

       This will ensure that the properties are setup correctly but that your customized
       build steps are used.
  -->
  <setup import="false"/>

  <!--
      This rules file is meant to be imported by the custom Ant task:
          com.android.ant.AndroidInitTask

      The following properties are put in place by the importing task:
          android.jar, android.aidl, aapt, aidl, and dx

      Additionnaly, the task sets up the following classpath reference:
          android.target.classpath
      This is used by the compiler task as the boot classpath.
  -->

  <!-- Custom tasks -->
  <taskdef name="aaptexec"
    classname="com.android.ant.AaptExecLoopTask"
    classpathref="android.antlibs" />

  <taskdef name="apkbuilder"
    classname="com.android.ant.ApkBuilderTask"
    classpathref="android.antlibs" />

  <taskdef name="xpath"
    classname="com.android.ant.XPathTask"
    classpathref="android.antlibs" />

  <macrodef name="my.echo">
    <text name="my.echo.text"/>
    <sequential>
      <if>
        <istrue value="${verbose}"/>
        <then>
          <echo>@{my.echo.text}</echo>
        </then>
      </if>
    </sequential>
  </macrodef>
  <!-- Properties -->

  <!-- Tells adb which device to target. You can change this from the command line
       by invoking "ant -Dadb.device.arg=-d" for device "ant -Dadb.device.arg=-e" for
       the emulator. -->
  <property name="adb.device.arg" value="" />

  <property name="android.tools.dir" location="${sdk.dir}/tools" />
  <!-- Name of the application package extracted from manifest file -->
  <property name="manifest.package" value="se.lolektivet.jolivi" />
  <!-- xpath input="AndroidManifest.xml" expression="/manifest/@package"
              output="manifest.package" / -->

  <!-- Input directories -->
  <property name="source.dir" value="src/java" />
  <property name="source.absolute.dir" location="${source.dir}" />
  <property name="resource.dir" value="res" />
  <property name="resource.absolute.dir" location="${resource.dir}" />
  <property name="asset.dir" value="assets" />
  <property name="asset.absolute.dir" location="${asset.dir}" />

  <!-- Output directories -->
  <property name="out.dir" value="output" />
  <property name="out.absolute.dir" location="${out.dir}" />
  <property name="out.classes.dir" value="${out.dir}/classes" />
  <property name="out.classes.absolute.dir" location="${out.classes.dir}" />
  <property name="gen.dir" value="${out.dir}/generated" />
  <property name="gen.absolute.dir" location="${gen.dir}" />
  <property name="headers.dir" value="${gen.dir}/headers" />
  <property name="headers.absolute.dir" location="${headers.dir}" />
  <property name="out.jni.dir" value="${out.dir}/jni" />
  <property name="out.jni.absolute.dir" location="${out.jni.dir}" />

  <!-- Directory for the third party java libraries -->
  <property name="external.libs.dir" value="${out.dir}/ext-libs" />
  <property name="external.libs.absolute.dir" location="${external.libs.dir}" />

  <!-- Directory for the native libraries -->
  <property name="native.libs.dir" value="${out.dir}/libs" />
  <property name="native.libs.absolute.dir" location="${native.libs.dir}" />

  <!-- Intermediate files -->
  <property name="dex.file.name" value="classes.dex" />
  <property name="intermediate.dex.file" location="${out.absolute.dir}/${dex.file.name}" />

  <!-- The final package file to generate -->
  <property name="out.debug.unaligned.package"
            location="${out.absolute.dir}/${ant.project.name}-debug-unaligned.apk" />
  <property name="out.debug.package"
            location="${out.absolute.dir}/${ant.project.name}-debug.apk" />
  <property name="out.unsigned.package"
            location="${out.absolute.dir}/${ant.project.name}-unsigned.apk" />
  <property name="out.unaligned.package"
            location="${out.absolute.dir}/${ant.project.name}-unaligned.apk" />
  <property name="out.release.package"
            location="${out.absolute.dir}/${ant.project.name}-release.apk" />

  <!-- Verbosity -->
  <property name="verbose" value="false" />
  <!-- This is needed by emma as it uses multilevel verbosity instead of simple 'true' or 'false'
       The property 'verbosity' is not user configurable and depends exclusively on 'verbose'
       value.-->
  <condition property="verbosity" value="verbose" else="quiet">
    <istrue value="${verbose}" />
  </condition>
  <!-- This is needed to switch verbosity of zipalign and aapt. Depends exclusively on 'verbose'
       -->
  <condition property="v.option" value="-v" else="">
    <istrue value="${verbose}" />
  </condition>
  <!-- This is needed to switch verbosity of dx. Depends exclusively on 'verbose' -->
  <condition property="verbose.option" value="--verbose" else="">
    <istrue value="${verbose}" />
  </condition>

  <!-- Tools -->
  <condition property="exe" value=".exe" else=""><os family="windows" /></condition>
  <property name="adb" location="${android.tools.dir}/adb${exe}" />
  <property name="zipalign" location="${android.tools.dir}/zipalign${exe}" />

  <!-- Emma configuration -->
  <property name="emma.dir" value="${sdk.dir}/tools/lib" />
    <path id="emma.lib">
      <pathelement location="${emma.dir}/emma.jar" />
      <pathelement location="${emma.dir}/emma_ant.jar" />
    </path>
  <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
  <!-- End of emma configuration -->

  <!-- Macros -->

  <!-- Configurable macro, which allows to pass as parameters output directory,
       output dex filename and external libraries to dex (optional) -->
  <macrodef name="dex-helper">
    <element name="external-libs" optional="yes" />
    <element name="extra-parameters" optional="yes" />
    <sequential>
      <my.echo>Converting compiled files and external libraries into ${intermediate.dex.file}...
      </my.echo>
      <apply executable="${dx}" failonerror="true" parallel="true">
        <arg value="--dex" />
        <arg value="--output=${intermediate.dex.file}" />
        <extra-parameters />
        <arg line="${verbose.option}" />
        <arg path="${out.classes.absolute.dir}" />
        <fileset dir="${external.libs.absolute.dir}" includes="*.jar" />
        <external-libs />
      </apply>
    </sequential>
  </macrodef>

  <!-- This is macro that enable passing variable list of external jar files to ApkBuilder
       Example of use:
       <package-helper>
         <extra-jars>
          <jarfolder path="my_jars" />
          <jarfile path="foo/bar.jar" />
          <jarfolder path="your_jars" />
         </extra-jars>
       </package-helper> -->
  <macrodef name="package-helper">
    <attribute name="sign.package" />
    <element name="extra-jars" optional="yes" />
    <sequential>
      <apkbuilder
            outfolder="${out.absolute.dir}"
            basename="${ant.project.name}"
            signed="@{sign.package}"
            verbose="${verbose}">
        <file path="${intermediate.dex.file}" />
        <sourcefolder path="${source.absolute.dir}" />
        <nativefolder path="${native.libs.absolute.dir}" />
        <jarfolder path="${external.libs.absolute.dir}" />
        <extra-jars/>
      </apkbuilder>
    </sequential>
  </macrodef>

  <!-- This is macro which zipaligns in.package and outputs it to out.package. Used by targets
       debug, -debug-with-emma and release.-->
  <macrodef name="zipalign-helper">
    <attribute name="in.package" />
    <attribute name="out.package" />
    <sequential>
      <my.echo>Running zip align on final apk...</my.echo>
      <exec executable="${zipalign}" failonerror="true">
        <arg line="${v.option}" />
        <arg value="-f" />
        <arg value="4" />
        <arg path="@{in.package}" />
        <arg path="@{out.package}" />
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="install" description="Install Opera Mini onto running emulator or connected device.">
    <attribute name="adbarg" default=""/>
    <sequential>
      <exec executable="${sdk.dir}/tools/adb" failonerror="true" outputproperty="adb.output">
        <arg line="@{adbarg} install"/>
        <arg value="-r"/>
        <arg value="${out.debug.package}"/>
      </exec>
      <if>
        <not>
          <contains string="${adb.output}" substring="Success"/>
        </not>
        <then>
          <exec executable="${sdk.dir}/tools/adb" failonerror="true">
            <arg line="@{adbarg} uninstall"/>
            <arg value="${manifest.package}"/>
          </exec>
          <exec executable="${sdk.dir}/tools/adb" failonerror="true">
            <arg line="@{adbarg} install"/>
            <arg value="${out.debug.package}"/>
          </exec>
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- Rules -->

  <target name="-debug-init">
    <property name="debug" value="true"/>
  </target>

  <target name="-release-init">
    <property name="debug" value="false"/>
  </target>

  <!-- Creates the output directories if they don't exist yet. -->
  <target name="-dirs">
    <my.echo>Creating output directories if needed...</my.echo>
    <mkdir dir="${resource.absolute.dir}" />
    <mkdir dir="${external.libs.absolute.dir}" />
    <mkdir dir="${native.libs.absolute.dir}" />
    <mkdir dir="${gen.absolute.dir}" />
    <mkdir dir="${out.absolute.dir}" />
    <mkdir dir="${out.classes.absolute.dir}" />
    <mkdir dir="${out.jni.absolute.dir}" />
    <mkdir dir="${headers.absolute.dir}" />
  </target>

  <!-- Generates the R.java file for this project's resources. -->
  <target name="-resource-src" depends="-dirs">
    <my.echo>Generating R.java / Manifest.java from the resources...</my.echo>
    <exec executable="${aapt}" failonerror="true">
      <arg value="package" />
      <arg line="${v.option}" />
      <arg value="-m" />
      <arg value="-J" />
      <arg path="${gen.absolute.dir}" />
      <arg value="-M" />
      <arg path="AndroidManifest.xml" />
      <arg value="-S" />
      <arg path="${resource.absolute.dir}" />
      <arg value="-I" />
      <arg path="${android.jar}" />
    </exec>
  </target>

  <!-- Generates java classes from .aidl files. -->
  <target name="-aidl" depends="-dirs">
    <my.echo>Compiling aidl files into Java classes...</my.echo>
    <apply executable="${aidl}" failonerror="true">
      <arg value="-p${android.aidl}" />
      <arg value="-I${source.absolute.dir}" />
      <arg value="-o${gen.absolute.dir}" />
      <fileset dir="${source.absolute.dir}">
        <include name="**/*.aidl" />
      </fileset>
    </apply>
  </target>

  <!-- Compiles this project's .java files into .class files. -->
  <target name="-compile" depends="-resource-src, -aidl"
          description="Compiles project's .java files into .class files">
    <!-- If android rules are used for a test project, its classpath should include
         tested project's location -->
    <condition property="extensible.classpath"
               value="${tested.project.absolute.dir}/${out.classes.dir}" else=".">
      <isset property="tested.project.absolute.dir" />
    </condition>
    <condition property="extensible.libs.classpath"
               value="${tested.project.absolute.dir}/${external.libs.dir}" else="./${external.libs.dir}">
      <isset property="tested.project.absolute.dir" />
    </condition>
    <javac encoding="ascii" target="1.5" debug="true" extdirs=""
            destdir="${out.classes.absolute.dir}"
            bootclasspathref="android.target.classpath"
            verbose="${verbose}" classpath="${extensible.classpath}"
            includeAntRuntime="false">
      <src path="${source.absolute.dir}" />
      <src path="${gen.absolute.dir}" />
      <classpath>
        <fileset dir="${external.libs.absolute.dir}" includes="*.jar" />
        <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
      </classpath>
    </javac>
  </target>

  <!-- Converts this project's .class files into .dex files -->
  <target name="-dex" depends="-compile">
    <dex-helper />
  </target>

  <!-- Puts the project's resources into the output package file
       This actually can create multiple resource package in case
       Some custom apk with specific configuration have been
       declared in default.properties.
       -->
  <target name="-package-resources">
    <my.echo>Packaging resources</my.echo>
    <aaptexec executable="${aapt}"
              command="package"
              manifest="AndroidManifest.xml"
              resources="${resource.absolute.dir}"
              assets="${asset.absolute.dir}"
              androidjar="${android.jar}"
              outfolder="${out.absolute.dir}"
              basename="${ant.project.name}" />
  </target>

  <!-- Packages the application and sign it with a debug key. -->
  <target name="-package-debug-sign" depends="-dex, -package-resources, -compile-native-code">
    <package-helper sign.package="true" />
  </target>

  <!-- Packages the application without signing it. -->
  <target name="-package-no-sign" depends="-dex, -package-resources, -compile-native-code">
    <package-helper sign.package="false" />
  </target>

  <target name="-compile-tested-if-test" if="tested.project.dir" unless="do.not.compile.again">
   <subant target="-compile">
      <fileset dir="${tested.project.absolute.dir}" includes="build.xml" />
   </subant>
  </target>

  <!-- Builds debug output package, provided all the necessary files are already dexed -->
  <target name="debug" depends="-debug-init, -compile-tested-if-test, -package-debug-sign"
            description="Builds the application and signs it with a debug key.">
    <zipalign-helper in.package="${out.debug.unaligned.package}"
                               out.package="${out.debug.package}" />
    <delete file="${out.debug.unaligned.package}"/>
    <delete file="${out.absolute.dir}/JoLiVi.ap_"/>
    <my.echo>Debug Package: ${out.debug.package}</my.echo>
  </target>

  <target name="-release-check">
    <condition property="release.sign">
      <and>
        <isset property="key.store" />
        <isset property="key.alias" />
      </and>
    </condition>
  </target>

  <target name="-release-nosign" depends="-release-check" unless="release.sign">
    <echo>No key.store and key.alias properties found in build.properties.</echo>
    <echo>Please sign ${out.unsigned.package} manually</echo>
    <echo>and run zipalign from the Android SDK tools.</echo>
  </target>

  <target name="release" depends="-release-init, -package-no-sign, -release-nosign" if="release.sign"
              description="Builds the application. The generated apk file must be signed before
                          it is published.">
    <!-- Gets passwords -->
    <input
            message="Please enter keystore password (store:${key.store}):"
            addproperty="key.store.password" />
    <input
            message="Please enter password for alias '${key.alias}':"
            addproperty="key.alias.password" />

    <!-- Signs the APK -->
    <my.echo>Signing final apk...</my.echo>
    <signjar
            jar="${out.unsigned.package}"
            signedjar="${out.unaligned.package}"
            keystore="${key.store}"
            storepass="${key.store.password}"
            alias="${key.alias}"
            keypass="${key.alias.password}"
            verbose="${verbose}" />

    <!-- Zip aligns the APK -->
    <zipalign-helper in.package="${out.unaligned.package}"
                               out.package="${out.release.package}" />
    <my.echo>Release Package: ${out.release.package}</my.echo>
  </target>

  <target name="install" depends="debug" description="Build and install onto running emulator or connected device.">
    <install />
  </target>

  <target name="install-d" depends="debug" description="Build and install onto connected device.">
    <install adbarg="-d" />
  </target>

  <target name="install-e" depends="debug" description="Build and install onto running emulator.">
    <install adbarg="-e" />
  </target>

  <target name="reinstall" description="Install last build onto running emulator or connected device.">
    <install />
  </target>

  <target name="reinstall-d" description="Install last build onto connected device.">
    <install adbarg="-d" />
  </target>

  <target name="reinstall-e" description="Install last build onto running emulator.">
    <install adbarg="-e" />
  </target>

  <target name="-uninstall-check">
    <condition property="uninstall.run">
      <isset property="manifest.package" />
    </condition>
  </target>

  <target name="-uninstall-error" depends="-uninstall-check" unless="uninstall.run">
    <echo>Unable to run 'ant uninstall', manifest.package property is not defined.
    </echo>
  </target>

  <!-- Uninstalls the package from the default emulator/device -->
  <target name="uninstall" depends="-uninstall-error" if="uninstall.run"
              description="Uninstalls the application from a running emulator or device.">
    <my.echo>Uninstalling ${manifest.package} from the default emulator or device...</my.echo>
    <exec executable="${adb}" failonerror="true">
      <arg line="${adb.device.arg}" />
      <arg value="uninstall" />
      <arg value="${manifest.package}" />
    </exec>
  </target>

  <target name="clean" description="Removes output files created by other targets.">
    <delete dir="${out.absolute.dir}" verbose="${verbose}" />
  </target>

  <!-- Targets for code-coverage measurement purposes, invoked from external file -->

  <!-- Emma-instruments tested project classes (compiles the tested project if necessary)
           and writes instrumented classes to ${instrumentation.absolute.dir}/classes -->
  <target name="-emma-instrument" depends="-compile">
    <my.echo>Instrumenting classes from ${out.absolute.dir}/classes...</my.echo>
    <!-- It only instruments class files, not any external libs -->
    <emma enabled="true">
      <instr verbosity="${verbosity}"
             mode="overwrite"
             instrpath="${out.absolute.dir}/classes"
             outdir="${out.absolute.dir}/classes">
      </instr>
      <!-- TODO: exclusion filters on R*.class and allowing custom exclusion from
           user defined file -->
    </emma>
  </target>

  <target name="-dex-instrumented" depends="-emma-instrument">
    <dex-helper>
      <extra-parameters>
        <arg value="--no-locals" />
      </extra-parameters>
      <external-libs>
        <fileset file="${emma.dir}/emma_device.jar" />
      </external-libs>
    </dex-helper>
  </target>

  <!-- Invoked from external files for code coverage purposes -->
  <target name="-package-with-emma" depends="-dex-instrumented, -package-resources">
    <package-helper sign.package="true">
      <extra-jars>
        <!-- Injected from external file -->
        <jarfile path="${emma.dir}/emma_device.jar" />
      </extra-jars>
    </package-helper>
  </target>

  <target name="-debug-with-emma" depends="-package-with-emma">
    <zipalign-helper in.package="${out.debug.unaligned.package}"
                               out.package="${out.debug.package}" />
  </target>

  <target name="-install-with-emma" depends="-debug-with-emma">
    <install-helper />
  </target>

  <!-- End of targets for code-coverage measurement purposes -->

  <target name="help">
    <!-- displays starts at col 13
          |13                                                              80| -->
    <echo>Android Ant Build. Available targets:</echo>
    <echo>   help:              Displays this help.</echo>
    <echo>   clean:             Removes output files created by other targets.</echo>
    <echo>   debug:             Builds the application and signs it with a debug key.</echo>
    <echo>   release:           Builds the application. The generated apk file must be</echo>
    <echo>                      signed before it is published.</echo>
    <echo>   install(-e/-d):    Build debug configuration and install/reinstall it onto a running</echo>
    <echo>                      emulator or device.</echo>
    <echo>                      If the application was previously installed, the</echo>
    <echo>                      signatures must match.</echo>
    <echo>   reinstall(-e/-d):  Install/reinstall already-built debug package onto a running</echo>
    <echo>                      emulator or device.</echo>
    <echo>   uninstall:         Uninstalls the application from a running emulator or</echo>
    <echo>                      device.</echo>
  </target>

  <property name="native.classes" value="se.lolektivet.jolivi.NativeFunctions"/>

  <target name="native-headers" depends="-compile,-dirs">
    <run.javah/>
  </target>

  <target name="-compile-native-code" depends="native-headers,-application-mk">
    <condition property="ndk.verbosity.arg" value="V=1 NDK_LOG=1" else="V=0">
      <istrue value="${verbose}"/>
    </condition>
    <condition property="ndk.debug.arg" value="DEBUG=true" else="DEBUG=false">
      <istrue value="${debug}"/>
    </condition>
    <exec executable="sh" dir="${out.absolute.dir}" failonerror="true">
      <arg line="${ndk.dir}/ndk-build ${ndk.verbosity.arg} ${ndk.debug.arg}"/>
    </exec>
  </target>

  <target name="libsmug" depends="-compile-libsmug">
  </target>

  <target name="-compile-libsmug">
    <exec executable="sh" dir="${out.absolute.dir}" failonerror="true">
      <arg line="${ndk.dir}/ndk-build"/>
    </exec>
  </target>

  <target name="-application-mk" depends="-dirs">
    <echo file="${out.jni.absolute.dir}/Application.mk">APP_PROJECT_PATH := $(shell cygpath "${out.absolute.dir}")
APP_PLATFORM = ${target}
APP_BUILD_SCRIPT := ${APP_PROJECT_PATH}/Android.mk
</echo>
    <copy file="AndroidManifest.xml" todir="${out.absolute.dir}"/>
    <copy file="Android.mk" todir="${out.absolute.dir}"/>
  </target>

  <macrodef name="run.javah">
    <sequential>
      <javah class="${native.classes}"
          destdir="${headers.absolute.dir}"
          verbose="${verbose}"
          classpath="${out.classes.dir}">
        <bootclasspath refid="android.target.classpath"/>
      </javah>
    </sequential>
  </macrodef>
</project>
